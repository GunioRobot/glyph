section[
	@title[Introducing &[macros]]
	@id[macro_intro]
	txt[
The most important concept to grasp about Glyph is the concept of _macro_.

A Glyph macro is, in a nutshell, an identifier of some kind that wraps a value or parameters within square brackets. More specifically:
* The macro identifier can contain _any_ character except for: @\[@, @\]@, @\\@, @\|@, code[@] or spaces.
* The delimiters can be either @\[@ and @\]@ or @\[=@ and @=\]@ (\.fmi[differences between delimiters|#esc_quot]). 
* The value can be anything, even other macros. If a macro supports more than one parameter, they must be separated with @\|@. For example, the %>[link] can take an optional second parameter for the link text: @\..[=link[#link_id\|This is the link text]=]@.
* A macro can also have _attributes_, which look exactly like macros but their identifier starts with a code[@].

A macro can often have one or more aliases. For example, @=>@ is an alias for the %>[link], so the following macro calls are equivalent:
* code[=\.=>[#test\|Test Section]=]
* code[=\.link[#test\|Test Section]=]
	]
]
section[
	@title[Macro attributes]
	@id[attribute_intro]
	txt[
Although a macro can take any number of parameters, they are often no more than two or three, for readibility reasons: parameters have no name, but their position within a macro is significant.

If you have something like this:
	]

	highlight[=html|custom_image[test.png\|50%\|50%\|Test Image]=]
	txt[
it may still be easy enough to understand what each parameter is used for, but:
* you can easily forget that the third parameter is the image width
* If you don't want to resize the image, you still have to pass _empty parameters_ to the macro, like this: code[=custom_image[test2.png\|\|\|Test Image]=]

To avoid these situations, some macros which would normally take three or four parameters take optional attributes instead, so you can write:
	]
	highlight[=html|
image[test.png
  @width[50%]
  @alt[Test Image]
  @height[50%]
]=]
	p[More verbose, of course, but definitely more readable. In this way, if you won't want to scale an image, you can safely omit the code[@width] and code[@height] attributes.]
	note[Like parameters, attributes can contain other macros, too.]
]
section[
	@title[Escaping and Quoting]
	@id[esc_quot]
	txt[
Glyph doesn't require any special control characters like LaTeX, and its macro syntax is very straightforward and liberal. This however comes with a price: because square brackets are used as delimiters, you must escape any square bracket in your text with a backslash. That's not _too_ bad if you think about it, unless you're writing programming code, in which case escaping every single square bracket can be painful.

If a portion of your text contains an excessive amount of square brackets, you may consider using the %>[escape] (or its alias @.@) with the @\[=@ and @=\]@ delimiters. By itself, the escape macro doesn't do anything: it just evaluates to its contents, but the special delimiters act as an escape for any square bracket within them. As a consequence, any macro within @\[=@ and @=\]@ will _not_ be evaluated.

You can use the quoting delimiters with _any_ macro identifier. Obviously, using them as delimiters for things like %>[section]s may not be a good idea, but they should be more or less mandatory with the %>[code], especially when it contains square brackets or even Glyph code, like this:
	]

	highlight[=html|
codeblock\[=
  section[
    @title[A section]
    @id[test]
This is a section.
    section[
    @title[A nested section]
This is another section.
    ]
  ]
\=]
	=]

	note[Although quoting delimiters allow you to use square brackets without escaping them, you must still escape them if you want to escape quoting delimiters themselves.]

	p[Besides square brackets, there are other characters that must or can be escaped with backslashes, as shown in the following table:]

	table[
 		tr[
   		th[Escape Sequence]
   		th[Evaluates to...]
   		th[Notes]
 		]
 		tr[
 			td[code[\\\.\[@]]
   		td[code[\[]]
   		td[&[sq_esc]]
  		]
 		tr[
   		td[code[\\\.\]]]
   		td[code[\]]]
   		td[&[sq_esc]]
 		]
 		tr[
   		td[code[\\\\]]
   		td[code[\\]]
   		td[Backslashes do not have to be escaped by default, but an escaped backslash will evaluate to itself.]
 		]
 		tr[
 			td[code[\\\.\=]]
   		td[code[\.=]]
   		td[Equal signs do not have to be escaped by default, but an escaped equal sign will evaluate to iself.]
 		]
 		tr[
   		td[code[\\\.\|]]
   		td[code[\|]]
   		td[Pipes must be escaped (even within quoting macros) unless they are used to separate macro parameters.]
 		]
 		tr[
   		td[code[\\\..]]
   		td[]
   		td[An escaped dot evaluates to nothing. Useful to separate macro identifiers from other characters:
				highlight[=html|_\\\\..=>[#link\|This link is emphasized using Textile]_ =]
    	]
  	]
	]
] 
