Glyph's command-line interface has been built using the =>[http://github.com/davetron5000/gli|gli] (Git-like interface) gem. Therefore, Glyph commands are all written like this:

@glyph@ _global-options_ command _options_ _parameters_

Where:
* _global-options_ and _options_ are in the form: @-n@ _value_ or @--name=@\._value_, e.g. @-f pdf@ or @--format=pdf@
* _parameters_ are separated by whitespaces, and can be wrapped in quotes.

section[header[Global Options]

section[header[@-d@, @--debug@]
If specified, the command is executed in debug mode and additional diagnostic information is printed on the screen.
]
]

section[header[@add@]
Creates a new text file in the @text/@ folder.

example[glyph add introduction.textile]

parameters[
-p[file-name|The name (or relative path) of the new file to be created.]
]
] --[End add]

section[header[@compile@]
Compiles a Glyph document into an output file. If no options are specified, the @document.glyph@ file is used as source to produce a standalone HTML file.

example[glyph compile -f pdf]

options[
-o[source|
The source file to compile. 
default[document.glyph]
]
-o[format|
The format of the output file.
default[html]
values[html, pdf]
]
]
] --[End compile]

section[header[@config@]
Gets or sets a configuration setting in the project or global configuration file (\.fmi[configuration files|#cfg]).

examples[
glyph config document.filename
glyph config -g document.author "Fabio Cevasco"
]

options[
-o[global|
If specified, the global configuration file is processed instead of the project file.
default[false]
]
]
parameters[
-p[setting|The name of a valid =>[#cfg_ref|configuration setting].]
-p[value|The new value of the configuration setting.]
]
] --[End config]

section[header[@init@]
Creates a new Glyph project in the current directory (if empty).

example[glyph init]
] --[End init]

section[header[@todo@|c_todo]
Prints all the todo items saved using the %>[todo].

example[glyph todo]
] --[End todo]
