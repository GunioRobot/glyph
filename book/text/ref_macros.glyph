section[header[Common Macros]

ref_macro[and|
Conditional @and@ operator, to be used with the %>[condition].

example[=?[and[true\|false]\|This is never displayed.]=]
]

ref_macro[comment|
Evaluates to nothing. Used to add comments in a Glyph document that will not be displayed in output files.

aliases[--]
example[=--[This is a comment. It will not be displayed in the output]=]
]

ref_macro[condition|
Tests a conditional expression (first parameter), and evaluates to the second parameter if the condition is satisfied. If the second parameter is an %>[escape] macro, its contents are unescaped and interpreted only if the condition is satisfied. For more information, see =>[#cond_macros].

aliases[?]

*Examples*

See any of the following:
* %>[and]
* %>[or]
* %>[not]
* %>[match]
* %>[eq]

]

ref_macro[config|
Evaluates to the configuration setting referenced by its value.

aliases[$]
example[=$[document.author]=]
]

ref_macro[config:|
Sets the value of a configuration setting.

aliases[$:]

example[=$:[document.draft\|true]=]

]

ref_macro[eq|
Conditional equality operator, to be used with the %>[condition].

example[=?[eq[$[document.draft]\|true]\|This is displayed only in draft documents.]=]
]

ref_macro[escape|
Evaluates to its value. Commonly used with the escaping delimiters codeph[\[\=] and codeph[\=\]].

aliases[.]
example[=.\[=Macros are escaped here =>[#test].=\]=]
]

ref_macro[include|
Evaluates to the contents of a text file stored in the @text/@ directory referenced by its value. If &[filter_by_ext], filters the contents of the file using the =>[#f_macros|filter macro] corresponding to the file extension.

aliases[@]
example[=@[introduction.textile]=]
]

ref_macro[match|
Evaluates to @true@ if the first parameter matches the second, an empty string otherwise. The second parameter must be a valid Ruby-compatible regular expression. This macro must be used with the %>[condition].

example[=?[match[Hello!\|/^hell/i]\|This is always displayed]=]
]

ref_macro[macro:|
Defines a macro.

note[The new macro &[only_after_declaration].]

aliases[%:]

example[=%:[test\|"<em>test: #@value</em>"]=]

]

ref_macro[not|
Conditional @and@ operator, to be used with the %>[condition].

example[=?[not[false]\|This is always displayed.]=]
]

ref_macro[or|
Conditional @or@ operator, to be used with the %>[condition].

example[=?[or[true\|false]\|This is always displayed.]=]
]

ref_macro[ruby|
Evaluates its value as Ruby code (using @Kernel#instance_eval@).

aliases[%]
examples[=
%[Time.now]
%[Glyph::VERSION]
=]
]

ref_macro[snippet|
Evaluates to the snippet referenced by its value.

aliases[&]
example[=&[glang]=]
]

ref_macro[snippet:|
Defines a snippet.

note[The new snippet &[only_after_declaration].]

aliases[&:]

example[=&:[test\|This is a test]=]

]

ref_macro[todo|
Saves the value as a TODO item, which can be printed using the #>[todo].

example[=todo[Remember to do this.]=]
]

] --[End common macros]

section[header[Filter Macros|f_macros]

ref_macro[markdown|
Uses a markdown converter (BlueCloth, RDiscount, Maruku or Kramdown) to transform the value into HTML if the $>[filters.target] is set to @html@.

&[called_on_files] with a @.markdown@ or a @.md@ extension. 

example[=markdown[This is *emphasized* text.]=]
]

ref_macro[textile|
Uses the RedCloth gem to transform the value into HTML or LaTeX, depending on the value of the $>[filters.target]. 

&[called_on_files] with a @.textile@ extension. 

example[=textile[This is a *strong emphasis*.]=]
]

] --[End filter macros]

section[header[Block Macros]

ref_macro[box|
Creates a titled box (@<div>@ tag).

*Example:*

code[=
box[Why boxes?\|
Boxes can be used to make a section of text stand out from the rest of the document.
]
=]
]

ref_macro[code|
Used to render a block of code within @<pre>@ and @<code>@ tags. For inline code, see the %>[codeph].

*Example:*

code[=
code[
  def hello
    puts "Hello World"
  end
]
=]

]

ref_macro[fig|
Includes an image in the document, with an optional caption.

examples[=
fig[diagram.png]
fig[graph.png\|Monthly pageviews]
=]
]

ref_macro[note|
Creates a note @div@ containing the value.

aliases[important, caution, tip]
example[=note[This is a note.]=]
]

ref_macro[img|
Includes an image in the document, optionally scaled according to the specified width and height. The image must be stored within the @images/@ directory of the current project.

examples[=
img[icon.png]
img[holidays/landscape.jpg\|70%]
img[logo.svg\|50%\|50%]
=]
]

ref_macro[pubdate|
Evaluates to a date string (in the format: _current-month_ _current-year_; or _%B_ _%Y_), within a @<div>@ tag.

example[=pubdate[]=]
]

ref_macro[subtitle|
Renders the subtitle of the document (based on the $>[document.subtitle]) within a @<h2>@ tag.

example[=subtitle[]=]
]

ref_macro[table|
Evaluates to an HTML table. Used in conjunction with the =>[#m_tr|@tr@], =>[#m_td|@td@] and =>[#m_th|@th@] macros.

*Example:*

code[=
table[
  tr[
    th[Name]
    th[Value]
  ]
  tr[
    td[A]
    td[1]
  ]
  tr[
    td[B]
    td[2]
  ]
]
=]

]

ref_macro[td|See =>[#m_table].]

ref_macro[title|
Renders the title of the document (based on the $>[document.title]) within a @<h1>@ tag.

example[=title[]=]
]

ref_macro[th|See =>[#m_table].]
ref_macro[tr|See =>[#m_table].]

] --[End block macros]

section[header[Inline Macros]

ref_macro[anchor|
Creates a named anchor (or bookmark).

aliases[bookmark, #]
example[=#[test\|Test Bookmark]=]
]

ref_macro[codeph|
Wraps the value in a @<code>@ tag.

example[=codeph[Kernel.instance_eval]=]

]

ref_macro[fmi|
Creates a _For More Information_ link (for an example usage, see the %>[link]).

example[=fmi[creating links\|#links]=]
]

ref_macro[link|
Creates an hyperlink (\.fmi[creating links|#links]).

aliases[\.=>]
examples[=
=>[#introduction]
=>[#troub\|Troubleshooting]
=>[http://www.h3rald.com\|H3RALD.com]
=]
]

] --[End inline macros]

section[header[Structure Macros]

ref_macro[body|
Creates a @<body>@ tag.
]

ref_macro[div|
Creates a @<div>@ tag.

*Aliases:* codeph[%[=Glyph['structure'].values.flatten.uniq.map{\|a\| a.to_s }.push("section").sort.join(', ')=]]
]

ref_macro[document|
The root macro used in every Glyph document. It creates an @<html>@ tag.
]

ref_macro[head|
Creates a @<head>@ tag, pre-populated with @title@ and author/copyright @<meta>@ tags.
]

ref_macro[header|
Creates an @h2@, @h3@, @h4@, etc. header (\.fmi[using headers|#sec_head]).

examples[=
header[Introduction]
header[Getting Started\|gs]
=]
]

ref_macro[section|See =>[#m_div].]

ref_macro[style|
Embeds the content of a CSS or Sass file within a @<style>@ tag (\.fmi[stylesheets|#stylesheets]).

example[=style[default.css]=]
]

ref_macro[toc|
Generates a _Table of Contents_ based on how sections and headers are nested in the current document.

example[=toc[]=]
]

] --[End structure macros]
