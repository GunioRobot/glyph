section[header[Text Editing]

One of the aims of Glyph is streamlining text editing. Glyph accomplishes this through its own macro language that can be used in conjunction with &[markups].

section[header[Introducing &[macros]]

By now you probably figured out what a macro looks like: it's an identifier of some kind that wraps a value or parameters within square brackets. More specifically:
* The macro identifier can contain _any_ character except for: @\[@, @\]@, @\\@, @\|@ or spaces.
* The delimiters can be either @\[@ and @\]@ or @\[=@ and @=\]@ (\.fmi[differences between delimiters|#esc_quot]). 
* The value can be anything, even other macros. If a macro supports more than one parameter, they must be separated with @\|@. For example, the @link@ (@=>@) macro can take an optional second parameter for the link text: @\..[==>[#link_id|This is the link text]=]@.

]

section[header[Escaping and Quoting|esc_quot]

Glyph doesn't require any special control characters like LaTeX, and its macro syntax is very straightforward and liberal. This however comes with a price: because square brackets are used as delimiters, you must escape any square bracket in your text with a backslash. That's not _too_ bad if you think about it, unless you're writing programming code: in that case, escaping every single square bracket can be painful.

If a portion of your text contains an excessive amount of square brackets, you may consider using the @escape@ macro (or better, its alias @.@) with @\[=@ and @=\]@ as delimiters. By itself, the escape macro doesn't do anything: it just evaluates to its contents, but the special delimiters act as a quote for any square bracket within them. As a consequence, any macro within @\[=@ and @=\]@ will _not_ be evaluated.

You can use the quoting delimiters with _any_ macro identifier. Obviously, using them as delimiters for things like @section@ macros may not be a good idea, but they should really be mandatory with the @code@ macro, like this:

code[=
code\[=
section[header[A section]

This is a section.

  section[header[A nested section]
This is another section.
  ]
]
=\]
=]

note[Although quoting delimiters allow you to use square brackets without escaping them, you must still escape them if you want to escape quoting delimiter themselves.]

Besides square brackets, there are other characters that must or can be escaped with backslashes, as shown in the following table

table[
	tr[
		th[Escape Sequence]
		th[Evaluates to...]
		th[Notes]
	]
	tr[
		td[@\\\[@]
		td[@\[@]
		td[&[sq_esc]]
	]
	tr[
		td[@\\\]@]
		td[@\]@]
		td[&[sq_esc]]
	]
	tr[
		td[@\\\\@]
		td[@\\@]
		td[Backslashes do not have to be escaped by default, but an escaped backslash will evaluate to itself.]
	]
	tr[
		td[@\\\=@]
		td[@=@]
		td[Equal signs do not have to be escaped by default, but an escaped equal sign will evaluate to iself.]
	]
	tr[
		td[@\\\|@]
		td[@\|@]
		td[Pipes must be escaped (even within quoting macros) unless they are used to separate two or more macro parameters.]
	]
	tr[
		td[@\\\..@]
		td[]
		td[An escaped dot evaluates to nothing. Useful to separate macro identifiers from other characters:
@\..[= _\.=>[#link|This is an emphasized link]_ =]@
		]
	]
]

] --[End section]

section[header[Sections and Headers]

Glyph documents are normally organized as a hierarchical tree of nested chapters, appendixes, sections, etc. To define a section, use the @section@ macro, like so:

code[=
section[
  header[Section #1]

Write the section contents here...

  section[
    header[Section #2]

This section is nested into the previous one.

  ] --[End of Section #2]
] --[End of Section #1]
=]

This example defines two nested sections, each with its own header. The header is _mandatory_: it will be displayed at the start of the section and in the Table of Contents. 

Note an important difference from HTML: there is no explicit level for the headers, as it will be determined at runtime when the document is compiled, based on how sections are nested. The previous code snippet (taken as it is), for example, will be transformed into the following HTML code:

code[=
<div class="section">
  <h2>Section #1</h2>
  <p>Write the section contents here...</p>
  <div class="section">
    <h3>Section #2</h3>
    <p>This section is nested in the previous one</p>
  </div>
</div>
=]

By default, in Glyph the first header level is _2_, so the two headers are rendered as @h2@ and @h3@, respectively (@--\[...\]@ macros are _comments_, therefore they are not included in the final output).

There are _a lot_ of macros that can be used in the same way as @section@, one for each element of =>[http://en.wikipedia.org/wiki/Book_design|Book Design]. Each one of them is a simple wrapper for a @div@ tag with a class set to its name.

The following table lists the identifiers of all section-like macros, divided according to the part of the book they should be placed in:

table[
	tr[
		td[*Frontmatter*]
		td[@imprint@ ^†^, @dedication@ ^†^, @inspiration@ ^†^, @foreword@ ^‡^, @introduction@ ^‡^, @acknowledgement@ ^‡^, @prologue@ ^‡^, @toc@ ^*^]
	]
	tr[
		td[*Bodymatter*]
		td[@volume@, @book@, @part@, @chapter@]
	]
	tr[
		td[*Backmatter*]
		td[@epilogue@ ^‡^, @afterword@ ^‡^, @postscript@ ^†^, @appendix@, @addendum@ ^‡^, @glossary@ ^**‡^, @colophon@ ^†^, @bibliography@ ^**‡^, @promotion@ ^†^, @references@ ^**‡^, @index@ ^**‡^, @lot@ ^**‡^, @lof@ ^**‡^]
	]
]

<notextile>*</notextile>: The @toc@ macro is to generate the Table of Contents automatically, and it must be used with no contents (@toc\[\]@).

<notextile>**</notextile>: This macro is likely to be extended in future versions to generate/aggregate content automatically.
 
†: This section is not listed in the Table of Contents.

‡: Any subsection of this section is not listed in the Table of Contents.

note[@frontmatter@, @bodymatter@ and @backmatter@ are also valid (and mandatory!) macro identifiers, typically already included in the default @document.glyph@ file of every project.]

] --[End section]

section[header[Including Files and Snippets]

]

section[header[Links and Bookmarks]

]

section[header[Images and Figures]

]


] --[End of Text Editing section]

section[header[Compiling your project]


section[header[Adding Stylesheets]

]


section[header[HTML output]

]

section[header[PDF Output]

]

todo[...]

]


