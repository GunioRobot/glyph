section[header[Text Editing]

One of the aims of Glyph is streamlining text editing. Glyph accomplishes this through its own macro language that can be used in conjunction with &[markups].

section[header[Introducing &[macros]]

By now you probably figured out what a macro looks like: it's an identifier of some kind that wraps a value or parameters within square brackets. More specifically:
* The macro identifier can contain _any_ character except for: @\[@, @\]@, @\\@, @\|@ or spaces.
* The delimiters can be either @\[@ and @\]@ or @\[=@ and @=\]@ (\.fmi[differences between delimiters|#esc_quot]). 
* The value can be anything, even other macros. If a macro supports more than one parameter, they must be separated with @\|@. For example, the @link@ (@=>@) macro can take an optional second parameter for the link text: @\..[==>[#link_id|This is the link text]=]@.

]

section[header[Escaping and Quoting|esc_quot]

Glyph doesn't require any special control characters like LaTeX, and its macro syntax is very straightforward and liberal. This however comes with a price: because square brackets are used as delimiters, you must escape any square bracket in your text with a backslash. That's not _too_ bad if you think about it, unless you're writing programming code: in that case, escaping every single square bracket can be painful.

If a portion of your text contains an excessive amount of square brackets, you may consider using the @escape@ macro (or better, its alias @.@) with @\[=@ and @=\]@ as delimiters. By itself, the escape macro doesn't do anything: it just evaluates to its contents, but the special delimiters act as a quote for any square bracket within them. As a consequence, any macro within @\[=@ and @=\]@ will _not_ be evaluated.

You can use the quoting delimiters with _any_ macro identifier. Obviously, using them as delimiters for things like @section@ macros may not be a good idea, but they should really be mandatory with the @code@ macro, like this:

code[=
code\[=
section[header[A section]

This is a section.

  section[header[A nested section]
This is another section.
  ]
]
=\]
=]

note[Although quoting delimiters allow you to use square brackets without escaping them, you must still escape them if you want to escape quoting delimiter themselves.]

Besides square brackets, there are other characters that must or can be escaped with backslashes, as shown in the following table

table[
	tr[
		th[Escape Sequence]
		th[Evaluates to...]
		th[Notes]
	]
	tr[
		td[@\\\[@]
		td[@\[@]
		td[&[sq_esc]]
	]
	tr[
		td[@\\\]@]
		td[@\]@]
		td[&[sq_esc]]
	]
	tr[
		td[@\\\\@]
		td[@\\@]
		td[Backslashes do not have to be escaped by default, but an escaped backslash will evaluate to itself.]
	]
	tr[
		td[@\\\=@]
		td[@=@]
		td[Equal signs do not have to be escaped by default, but an escaped equal sign will evaluate to iself.]
	]
	tr[
		td[@\\\|@]
		td[@\|@]
		td[Pipes must be escaped (even within quoting macros) unless they are used to separate two or more macro parameters.]
	]
	tr[
		td[@\\\..@]
		td[]
		td[An escaped dot evaluates to nothing. Useful to separate macro identifiers from other characters:
@\..[= _\.=>[#link|This is an emphasized link]_ =]@
		]
	]
]

] --[End section]

section[header[Sections and Headers]

Glyph documents are normally organized as a hierarchical tree of nested chapters, appendixes, sections, etc. To define a section, use the @section@ macro, like so:

code[=
section[
  header[Section #1]

Write the section contents here...

  section[
    header[Section #2]

This section is nested into the previous one.

  ] --[End of Section #2]
] --[End of Section #1]
=]

This example defines two nested sections, each with its own header. The header is _mandatory_: it will be displayed at the start of the section and in the Table of Contents. 

Note an important difference from HTML: there is no explicit level for the headers, as it will be determined at runtime when the document is compiled, based on how sections are nested. The previous code snippet (taken as it is), for example, will be transformed into the following HTML code:

code[=
<div class="section">
  <h2>Section #1</h2>
  <p>Write the section contents here...</p>
  <div class="section">
    <h3>Section #2</h3>
    <p>This section is nested in the previous one</p>
  </div>
</div>
=]

By default, in Glyph the first header level is _2_, so the two headers are rendered as @h2@ and @h3@, respectively (@--\[...\]@ macros are _comments_, therefore they are not included in the final output).

There are _a lot_ of macros that can be used in the same way as @section@, one for each element of =>[http://en.wikipedia.org/wiki/Book_design|Book Design]. Each one of them is a simple wrapper for a @div@ tag with a class set to its name.

The following table lists the identifiers of all section-like macros, divided according to the part of the book they should be placed in:

table[
	tr[
		td[*Frontmatter*]
		td[@imprint@ ^†^, @dedication@ ^†^, @inspiration@ ^†^, @foreword@ ^‡^, @introduction@ ^‡^, @acknowledgement@ ^‡^, @prologue@ ^‡^, @toc@ ^*^]
	]
	tr[
		td[*Bodymatter*]
		td[@volume@, @book@, @part@, @chapter@]
	]
	tr[
		td[*Backmatter*]
		td[@epilogue@ ^‡^, @afterword@ ^‡^, @postscript@ ^†^, @appendix@, @addendum@ ^‡^, @glossary@ ^**‡^, @colophon@ ^†^, @bibliography@ ^**‡^, @promotion@ ^†^, @references@ ^**‡^, @index@ ^**‡^, @lot@ ^**‡^, @lof@ ^**‡^]
	]
]

<notextile>*</notextile>: The @toc@ macro is to generate the Table of Contents automatically, and it must be used with no contents (@toc\[\]@).

<notextile>**</notextile>: This macro is likely to be extended in future versions to generate/aggregate content automatically.
 
†: This section is not listed in the Table of Contents.

‡: Any subsection of this section is not listed in the Table of Contents.

note[@frontmatter@, @bodymatter@ and @backmatter@ are also valid (and mandatory!) macro identifiers, typically already included in the default @document.glyph@ file of every project.]

] --[End section]

section[header[Including Files and Snippets]

If you're authoring a user manual, a long article or a book, writing everything inside a single file (@document.glyph@) may not be optimal. For this reason, Glyph provides an @include@ macro (aliased by codeph[@]) that can be used to include the contents of any file within the @text/@ directory:

codeph[=@[introduction.textile]=]

The macro above loads the contents of the @introduction.textile@ file, that can be stored _anywhere_ within the @text/@ directory.

note[Unlike with =>[img_fig|image and figures] that must be included with their _relative_ path to the @images/@ folder, you must not specify a relative path when including text files. This is due to the fact that images are copied _as they are_ in the @output/<format>/images/@ directory and they have to be linked from the output file.

A possible downside of this behavior is that file names must be unique within the entire @text/@ directory (or any of its subdirectories)]

When including a text file, by default an input filter macro is applied to its contents based on the file extension used:
* @.textile@ &rarr; @textile@
* @.markdown@ or @.md@ &rarr; @markdown@

tip[You can override this behavior by setting the @filters.by_file_extensions@ configuration setting to @false@, like this:

@glyph config filters.by_file_extensions false@]

While including the context of an entire file is definitely a useful feature for content reuse, sometimes it can be an overkill. What if, for example, you just want to reuse a short procedure or even a sentence? In this case, you may want to consider using a _snippet_ instead.

Snippets are text strings saved in YAML format in the @snippets.yml@ file. They can be included anywhere in your document using the @snippet@ macro (or its alias @&@). 

box[Example|
Consider the following @snippets.yml@ file:
code[=
--- 
:glang: Glyph Language
:macros: Glyph Macros
:sq_esc: \|-
  Square brackets must be escaped 
  unless used as macro delimiters or within a quoting macro.
:markups: Textile or Markdown
:test: \|-
  This is a 
  Test snippet
=]
You can use codeph[=&[markups]=] anywhere in your document instead of having to type "Textile or Markdown" every time. Additionally, later on you can change the value of the @markups@ snippets only in the @snippets.yml@ file to change it everywhere else in the document.
] --[End Example]
tip[
Snippets (or any other macro) can be nested within other snippets. Glyph takes care of checking if you nested snippets or macros mutually and warns you if necessary.
]
] --[End Section]


section[header[Links and Bookmarks]

]

section[header[Evaluating Ruby code and Configuration Settings]

]

section[header[Images and Figures|img_fig]

]


] --[End of Text Editing section]

section[header[Compiling your project]


section[header[Adding Stylesheets]

]


section[header[HTML output]

]

section[header[PDF Output]

]

todo[...]

]


