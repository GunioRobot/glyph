section[header[Creating your first Glyph Project]

To install Glyph, simply run @gem install glyph@, like with any other Ruby gem. Then, create a new directory and initialize a new Glyph project, like so:

@mkdir@ _==test_document==_

@cd@ _==test_document==_

@glyph init@

That's it. You just created a new Glyph project in the @test_document@ directory.

box[Glyph's dependencies|
Glyph requires the following gems:
- extlib
- gli
- treetop
- rake

Additionally, some Glyph macros may require additional gems, such as:
- RedCloth (_textile_ macro)
- Maruku _or_ Kramdown _or_ BlueCloth (_markdown_ macro)
- Haml (if you want to load .sass files with the _style_ macro)
]

Every Glyph project is comprised of the following directories:
* @images/@ -- used to store the image files used in your document.
* @lib/@ -- used to store your custom Glyph macros and Rake tasks.
* @output/@ -- used to store your generated output files.
* @styles/@ -- used to store your stylesheets.
* @text/*@ -- used to store your source text files.

Additionally, the following files are also created at top level:
* @config.yml@ -- containing your =>[#cfg|Project Configuration].
* @document.glyph@ -- containing your =>[#struct|Document Structure]
* @snippets.yml@ -- containing your text =>[#incl|snippets].

]

section[header[Document Structure|struct]

Every Glyph project contains a @document.glyph@ file that is typically used to define the document structure. The default @document.glyph@
generated automatically when creating a new project is the following:

code[=
document[
  head[style[default.css]]
  body[
    titlepage[
      title[]
      author[]
      pubdate[]
    ]
    frontmatter[
      toc[]
      preface[header[Preface]
        @[preface.textile]
      ]
    ]
    bodymatter[  
      chapter[header[Chapter #1]
        @[chapter_1.textile]
      ]
      chapter[header[Chapter #2]
        @[chapter_2.textile]
      ]
    ]
    backmatter[
      appendix[header[Appendix A]
        @[appendix_a.textile]
      ]
    ]
  ]
]=]

Even without knowing anything about &[glang], you can easily figure out that this file defines a document with a Table of Contents, a Preface and some Chapters. @frontmatter\[\]@, @preface\[\]@, @chapter\[\]@, etc. are all Glyph _macros_ used to define -- in this case -- some structural elements. In practice, this means that if you plan to generate an HTML document, they'll be converted into @<div>@ tags.

Be aware that other macros, on the other hand, are used to do something completely different, e.g.:
* @toc\[\]@ generates the document's Table of Contents
* codeph[=@\[\]=] or its alias @include\[\]@ is used to copy the contents of another file stored anywhere in the @/text@ directory.

Let's now analyze this @document.glyph@ more in detail.
* The @document\[\]@ macro wraps every other macro. This is necessary to create the initial @<html>@ tag.
* Similarly, @head\[\]@ and @body\[\]@ are used to generate the respective HTML tags. Actually, @head\[\]@ already sets some metadata for you, by default (author and copyright).
* Within @head\[\]@, the @style\[\]@ macro is used to load the @default.css@ stylesheet, which is included by default the @/styles@ directory of every Glyph project.
* Immediately after the @body\[\]@ macro, the @titlepage\[\]@ macro is used to define (guess...) the first page of your document. @title\[\]@, @author\[\]@  and @pubdate\[\]@ insert the title of the document, its author and the publication date (retrieved from the project's =>[#cfg|configuration settings]).
* Then, the @frontmatter\[\]@, @bodymatter\[\]@ and @backmatter\[\]@ macros are used to further divide the portions of your document according to the rules of =>[http://en.wikipedia.org/wiki/Book_design|book design]. They are not mandatory, but they can be used, for example, to number your appendixes with letters instead of numbers and similar.
* @preface\[\]@, @chapter\[\]@, @appendix\[\]@ are just a way to wrap content in @<div>@ tags, from an HTML point of view, but they are also necessary to nest the content of your document and generate the Table of Contents automatically, together with the @header\[\]@ macro.

]

section[header[Project Configuration|cfg]

Glyph stores configuration settings in the following YAML files:
# Your _Project Configuration_ is stored in the @config.yml@ file, included in each Glyph Project.
# Your _Global Configuration_ is stored in a @.glyphrc@ file in your $HOME (or ==%HOMEPATH%== on Windows) directory (not created by default).
# The _System Configuration_ is stored in the source directory of Glyph itself.

When compiling, Glyph loads all these configuration files and merges them according to the following rules:
* A setting configured in the _Project Configuration_ overrides the same setting in both Global and System configuration.
* A setting configured in the _Global Configuration_ overrides the same setting in the _System Configuration_

Typically, you should use the _Project Configuration_ for all project-specific settings and the _Global Configuration_ for settings affecting all your projects (for example, you may want to set 'document.author' in the Global Configuration instead of setting it in the Project Configuration of all your Glyph projects). The _System Configuration_ is best left untouched.

Instead of editing your configuration settings directly, you can use the @glyph config@ command, as follows:

@glyph config@ _setting_ _\[value\]_

If no _value_ is specified, glyph just prints the value of the configuration setting, so typing @glyph config document.author@ right after creating a project (assuming you didn't set this in the Global Configuration) will print nothing, because this setting is blank by default.

To change the value of a configuration setting, specify a value right after the setting, like this:

@glyph config document.author "John Smith"@

In this way, the document author will be set to _John Smith_ for the current project. To save this setting globally, add a @-g@ option, like this:

@glyph config -g document.author "John Smith"@

box[Regarding configuration values and data types...|
Glyph attempts to "guess" the data type of a configuration values by evaluation (@Kernel#instance_eval@) if the value:
- is wrapped in quotes (@"@ or @'@) &rarr; String
- starts with a colon (@:@) &rarr; Symbol
- is wrapped in square brackets (@\[@ and @\]@) &rarr; Array
- is wrapped in curly brackets (@\{@ and @\}@) &rarr; Hash
- is _true_ or _false_ &rarr; Boolean
- If the value is _nil_ &rarr; NilClass

Note that this guessing is far from being foolproof: If you type something like _{:test, 2}_, for example, you'll get an error. 
]

There are plenty of configuration settings that can be modified, but most of them are best if left alone (and in the System Configuration file). For a complete reference, see =>[#cfg_ref]. Normally, you may just want to change the following ones:

table[
	tr[
		th[Setting]
		th[Description]
	]
	tr[
		td[*document.author*]
		td[The author of the document]
	]
	tr[
		td[*document.title*]
		td[The title of the document]
	]
	tr[
		td[*document.filename*]
		td[The document file name]
	]
]

]
