This chapter explains how to install and use Glyph to create and manage documents.

todo[Expand...]

section[header[Installing Glyph]

To install Glyph, simply run @gem install glyph@, like with any other Ruby gem. Then, create a new directory and initialize a new Glyph project, like so:

textile.code[=text|
mkdir my_glyph_project
cd my_glyph_project
glyph init=]

That's it. The @my_glyph_project@ directory contains your brand new Glyph project. If you open the @document.glyph@ file with  your favorite text editor, you can start writing your book or article right away.

box[Glyph's dependencies|
Glyph requires the following gems:
* extlib
* gli
* treetop
* rake

Additionally, some Glyph macros may require additional gems, such as:
* RedCloth (_textile_ macro)
* Maruku _or_ Kramdown _or_ BlueCloth (_markdown_ macro)
* Haml (if you want to load .sass files with the _style_ macro)
]

]

section[header[Introducing document.glyph]

Every Glyph project contains a @document.glyph@ file that is typically used to define the document structure. The default @document.glyph@
generated automatically when creating a new project is the following:

textile.code[=text|
document[
  head[style[default.css]]
  body[
    titlepage[
      title[]
      author[]
      pubdate[]
    ]
    frontmatter[
      toc[]
      preface[header[Preface]
        @[preface.textile]
      ]
    ]
    bodymatter[  
      chapter[header[Chapter #1]
        @[chapter_1.textile]
      ]
      chapter[header[Chapter #2]
        @[chapter_2.textile]
      ]
    ]
    backmatter[
      appendix[header[Appendix A]
        @[appendix_a.textile]
      ]
    ]
  ]
]=]

Even without knowing anything about &[glang], you can easily figure out that this file defines a document with a Table of Contents, a Preface and some Chapters. @frontmatter\[\]@, @preface\[\]@, @chapter\[\]@, etc. are all Glyph _macros_ used to define -- in this case -- some structural elements. In practice, this means that if you plan to generate an HTML document, they'll be converted into @<div>@ tags.

Be aware that other macros, on the other hand, are used to do something completely different, e.g.:
* @toc\[\]@ generates the document's Table of Contents
* <code>@\[\]</code> or its alias @include\[\]@ is used to copy the contents of another file stored anywhere in the @/text@ directory.

Let's now analyze this @document.glyph@ more in detail.
* The @document\[\]@ macro wraps every other macro. This is necessary to create the initial @<html>@ tag.
* Similarly, @head\[\]@ and @body\[\]@ are used to generate the respective HTML tags. Actually, @head\[\]@ already sets some metadata for you, by default (author and copyright).
* Within @head\[\]@, the @style\[\]@ macro is used to load the @default.css@ stylesheet, which is included by default the @/styles@ directory of every Glyph project.
* Immediately after the @body\[\]@ macro, the @titlepage\[\]@ macro is used to define (guess...) the first page of your document. @title\[\]@, @author\[\]@  and @pubdate\[\]@ insert the title of the document, its author and the publication date (retrieved from the project's =>[#cfg|configuration settings]).
* Then, the @frontmatter\[\]@, @bodymatter\[\]@ and @backmatter\[\]@ macros are used to further divide the portions of your document according to the rules of =>[http://en.wikipedia.org/wiki/Book_design|book design]. They are not mandatory, but they can be used, for example, to number your appendixes with letters instead of numbers and similar.
* @preface\[\]@, @chapter\[\]@, @appendix\[\]@ are just a way to wrap content in @<div>@ tags, from an HTML point of view, but they are also necessary to nest the content of your document and generate the Table of Contents automatically, together with the @header\[\]@ macro.

]

section[header[Editing text files]

todo[...]

]

section[header[Changing configuration settings|cfg]

todo[...]

]



section[header[Compiling your project]

todo[...]

]


